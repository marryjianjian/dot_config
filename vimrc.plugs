" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=1 foldmethod=marker spell:
"
"                    __ _ _____              _
"         ___ _ __  / _/ |___ /      __   __(_)_ __ ___
"        / __| '_ \| |_| | |_ \ _____\ \ / /| | '_ ` _ \
"        \__ \ |_) |  _| |___) |_____|\ V / | | | | | | |
"        |___/ .__/|_| |_|____/        \_/  |_|_| |_| |_|
"            |_|
"
"   This is the personal .vimrc.plugs file modified from Steve Francia.
"   While much of it is beneficial for general use, I would
"   recommend picking out the parts you want and understand.
"
"   This file imports the various plugins of spf13. If you
"   wish to alter which groups are imported, see vimrc.before.
"   If you wish to add or remove individual plugs, create
"   ~/.vimrc.plugs.local and `Plug` as needed
"   from there.
"
"   You can find me at http://spf13.com
" }

    " Basics {
        set nocompatible        " Must be first line
        set background=dark     " Assume a dark background
    " }

" Plugs {

    " Deps {
        "Plug 'gmarik/vundle'
        Plug 'MarcWeber/vim-addon-mw-utils'
        Plug 'tomtom/tlib_vim'
        if executable('rg')
            Plug 'mileszs/ack.vim'
            let g:ackprg = 'rg --vimgrep --smart-case'
        elseif executable('ack-grep')
            let g:ackprg="ack-grep -H --nocolor --nogroup --column"
            Plug 'mileszs/ack.vim'
        elseif executable('ack')
            Plug 'mileszs/ack.vim'
        endif
    " }
    if has('nvim')
        Plug 'neovim/nvim-lspconfig'
        Plug 'hrsh7th/cmp-nvim-lsp'
        Plug 'hrsh7th/cmp-buffer'
        Plug 'hrsh7th/cmp-path'
        Plug 'hrsh7th/cmp-cmdline'
        Plug 'hrsh7th/nvim-cmp'
        Plug 'hrsh7th/cmp-vsnip'
        Plug 'hrsh7th/vim-vsnip'
    endif

    " In your .vimrc.before.local file
    " list only the plugin groups you will use
    if !exists('g:spf13_bundle_groups')
        let g:spf13_bundle_groups=['general', 'programming', 'go', 'rust']
    endif

    let g:spf13_no_views = 1
    " To override all the included plugs, add the following to your
    " .vimrc.plugs.local file:
    "   let g:override_spf13_plugs = 1
    if !exists("g:override_spf13_plugs")

    " General {
        if count(g:spf13_bundle_groups, 'general')
            Plug 'ojroques/vim-oscyank'
            Plug 'scrooloose/nerdtree'
            Plug 'altercation/vim-colors-solarized'
            Plug 'spf13/vim-colors'
            "Plug 'tpope/vim-repeat'
            Plug 'rhysd/conflict-marker.vim'
            Plug 'ctrlpvim/ctrlp.vim'
            Plug 'tacahiroy/ctrlp-funky'
            Plug 'jistr/vim-nerdtree-tabs'
            Plug 'flazz/vim-colorschemes'
            Plug 'mbbill/undotree'
            if !exists('g:spf13_no_views')
                Plug 'vim-scripts/restore_view.vim'
            endif
            Plug 'mhinz/vim-signify'
            "Plug 'osyo-manga/vim-over'
        endif
    " }

    " General Programming {
        if count(g:spf13_bundle_groups, 'programming')
            " Pick one of the checksyntax, jslint, or syntastic
            "Plug 'scrooloose/syntastic'
            Plug 'tpope/vim-fugitive'
            Plug 'scrooloose/nerdcommenter'
            "Plug 'tpope/vim-commentary'
            Plug 'godlygeek/tabular'
            if executable('ctags')
                Plug 'ludovicchabant/vim-gutentags'
                Plug 'majutsushi/tagbar'
            endif
            if executable('clang-format')
                Plug 'rhysd/vim-clang-format'
            endif
        endif
    " }

    " Snippets & AutoComplete {
        if count(g:spf13_bundle_groups, 'coc')
            Plug 'neoclide/coc.nvim', {'branch': 'release'}
        elseif count(g:spf13_bundle_groups, 'youcompleteme')
            Plug 'ycm-core/YouCompleteMe'
            Plug 'SirVer/ultisnips'
            Plug 'honza/vim-snippets'
        elseif count(g:spf13_bundle_groups, 'neocomplete')
            Plug 'Shougo/neocomplete.vim'
            Plug 'Shougo/neosnippet'
            Plug 'Shougo/neosnippet-snippets'
            Plug 'honza/vim-snippets'
        endif
    " }

    " PHP {
        if count(g:spf13_bundle_groups, 'php')
            " Plug 'spf13/PIV'
            Plug 'arnaud-lb/vim-php-namespace'
            Plug 'beyondwords/vim-twig'
        endif
    " }

    " Python {
        if count(g:spf13_bundle_groups, 'python')
            " Pick either python-mode or pyflakes & pydoc
            "Plug 'klen/python-mode'
            Plug 'yssource/python.vim'
        endif
    " }

    " Javascript {
        if count(g:spf13_bundle_groups, 'javascript')
            "Plug 'elzr/vim-json'
            "Plug 'groenewege/vim-less'
            Plug 'pangloss/vim-javascript'
            "Plug 'briancollins/vim-jst'
            "Plug 'kchmck/vim-coffee-script'
        endif
    " }

    " Scala {
        if count(g:spf13_bundle_groups, 'scala')
            Plug 'derekwyatt/vim-scala'
            Plug 'derekwyatt/vim-sbt'
            Plug 'xptemplate'
        endif
    " }

    " Haskell {
        if count(g:spf13_bundle_groups, 'haskell')
            Plug 'travitch/hasksyn'
            Plug 'dag/vim2hs'
            Plug 'Twinside/vim-haskellConceal'
            Plug 'Twinside/vim-haskellFold'
            Plug 'lukerandall/haskellmode-vim'
            Plug 'eagletmt/neco-ghc'
            Plug 'eagletmt/ghcmod-vim'
            Plug 'Shougo/vimproc.vim'
            Plug 'adinapoli/cumino'
            Plug 'bitc/vim-hdevtools'
        endif
    " }

    " HTML {
        if count(g:spf13_bundle_groups, 'html')
            Plug 'vim-scripts/HTML-AutoCloseTag'
            "Plug 'hail2u/vim-css3-syntax'
            Plug 'gorodinskiy/vim-coloresque'
            Plug 'tpope/vim-haml'
            Plug 'mattn/emmet-vim'
        endif
    " }

    " Ruby {
        if count(g:spf13_bundle_groups, 'ruby')
            Plug 'tpope/vim-rails'
            let g:rubycomplete_buffer_loading = 1
            "let g:rubycomplete_classes_in_global = 1
            "let g:rubycomplete_rails = 1
        endif
    " }

    " Puppet {
        if count(g:spf13_bundle_groups, 'puppet')
            Plug 'rodjek/vim-puppet'
        endif
    " }

    " Go Lang {
        if count(g:spf13_bundle_groups, 'go')
            "Plug 'Blackrush/vim-gocode'
            Plug 'fatih/vim-go'
        endif
    " }

    " Elixir {
        if count(g:spf13_bundle_groups, 'elixir')
            Plug 'elixir-lang/vim-elixir'
            Plug 'carlosgaldino/elixir-snippets'
            Plug 'mattreduce/vim-mix'
        endif
    " }

    " Misc {
        if count(g:spf13_bundle_groups, 'misc')
            "Plug 'tpope/vim-markdown'
            "Plug 'spf13/vim-preview'
            "Plug 'tpope/vim-cucumber'
            "Plug 'cespare/vim-toml'
            "Plug 'quentindecock/vim-cucumber-align-pipes'
            "Plug 'saltstack/salt-vim'
        endif
    " }

    " Rust {
        if count(g:spf13_bundle_groups, 'rust')
            Plug 'rust-lang/rust.vim'
        endif
    " }

    endif

" }

